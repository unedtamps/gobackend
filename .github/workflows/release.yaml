name: ci
on:
  push:
    branches:
      - 'master'
jobs:
  test:
    name: Golang Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: appdb
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis
        env:
          REDIS_PASSWORD: password
          REDIS_DB: 0
          REDIS_HOST: redis
          REDIS_PORT: 6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Set up Go 1.21.7
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.7
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - name: Install migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv ./migrate /usr/bin/migrate
          which migrate
      - name: Install sqlc
        run: |
          curl -L https://github.com/sqlc-dev/sqlc/releases/download/v1.25.0/sqlc_1.25.0_linux_amd64.tar.gz | tar xvz
          sudo mv ./sqlc /usr/bin/sqlc
          which sqlc
      - name: Run migration
        run: migrate -path internal/migration -database "postgres://postgres:password@localhost:5432/appdb?sslmode=disable" -verbose up
      - name: Run sqlc generate
        run: DB_URI="postgres://postgres:password@localhost:5432/appdb?sslmode=disable" sqlc generate
      - name: Run tests
        run: go test -V -cover ./...
  build:
    name: Build Go
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: Set up Go 1.21.7
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.7
      - name: Compile go
        run: |
          go build -o prod .
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: prod
          path: prod
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install sshpas
        run: sudo apt-get install -y sshpass
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: prod
          path: .
      - name: Deploy to VM
        env:
          VM_HOST: ${{ secrets.HOST }}
          VM_USERNAME: ${{ secrets.USERNAME }}
          VM_PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          echo "Transferring binary to VM..."
          sshpass -p "${VM_PASSWORD}" scp -o StrictHostKeyChecking=no prod ${VM_USERNAME}@${VM_HOST}:/home/${VM_USERNAME}/golang-backend/bin/prod
      - name: Run Program
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            cd ./golang-backend
            chmod +x ./bin/prod
            make prod ENV=production
