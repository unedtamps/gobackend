// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todo.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const makeTodo = `-- name: MakeTodo :one
INSERT INTO "todolist" ("title", "description") VALUES ($1 , $2) RETURNING id
`

type MakeTodoParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) MakeTodo(ctx context.Context, arg MakeTodoParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, makeTodo, arg.Title, arg.Description)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const queryTodo = `-- name: QueryTodo :many
SELECT id, title, description, status, created_at, updated_at from "todolist"
`

func (q *Queries) QueryTodo(ctx context.Context) ([]*Todolist, error) {
	rows, err := q.db.Query(ctx, queryTodo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Todolist
	for rows.Next() {
		var i Todolist
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryTodoById = `-- name: QueryTodoById :one
SELECT id, title,description FROM "todolist" WHERE id = $1
`

type QueryTodoByIdRow struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
}

func (q *Queries) QueryTodoById(ctx context.Context, id uuid.UUID) (*QueryTodoByIdRow, error) {
	row := q.db.QueryRow(ctx, queryTodoById, id)
	var i QueryTodoByIdRow
	err := row.Scan(&i.ID, &i.Title, &i.Description)
	return &i, err
}
